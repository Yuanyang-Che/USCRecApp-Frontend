plugins {
    id 'com.android.application'
    id 'com.google.protobuf' version '0.8.12'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'jacoco'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.life.hacker.uscrecapp"
        minSdk 30
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }

    testOptions {
        animationsDisabled = true
    }
}

sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

dependencies {
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.6'
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.7'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.4.0"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:3.4.0"

    androidTestImplementation "androidx.test:core:1.4.0"
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.ext:truth:1.4.0"
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        if (project.hasProperty('protoc_platform')) {
            artifact = "com.google.protobuf:protoc:3.13.0:${protoc_platform}"
        } else {
            artifact = "com.google.protobuf:protoc:3.13.0"
        }
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            if (project.hasProperty('protoc_platform')) {
                artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0:${protoc_platform}"
            } else {
                artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

// jacoco
def coverageSourceDirs = [
        'src/main/java',
]

jacoco {
    toolVersion = "0.8.8"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    getClassDirectories().setFrom(fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ]))
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(files("$buildDir/jacoco/testDebug.exec"))
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
